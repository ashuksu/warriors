# --- Stage 1: Frontend Builder ---
# Builds frontend assets. Includes Node.js and dev dependencies.
# This stage is used to create the /app/public/dist artifact.
FROM node:20-alpine AS frontend-builder

# Install dependencies needed for `sharp` image processing library.
RUN apk add --no-cache vips-dev build-base python3

WORKDIR /app

# Copy package files and install all dependencies (including devDependencies for build).
COPY package*.json ./
RUN npm install

# Copy the entire application source code. .dockerignore prevents sensitive files/dirs.
COPY . .

# Build the frontend assets. This generates /app/public/dist.
RUN npm run build


# --- Stage 2: Final PHP-FPM Image (for Development & Static Site Generation) ---
# This image is optimized for development workflows and static site generation,
# where application code is mounted as a volume from the host.
FROM php:8.3-fpm-alpine

# Install system dependencies required for PHP extensions and Composer.
RUN apk add --no-cache \
    curl git zip unzip libzip-dev libsodium-dev postgresql-dev \
    imagemagick-dev libpng-dev libjpeg-turbo-dev freetype-dev icu-dev linux-headers;

# Configure and install PHP extensions.
RUN docker-php-ext-configure gd --with-freetype --with-jpeg \
    && docker-php-ext-install -j$(nproc) \
    opcache zip pdo pdo_mysql gd intl bcmath sockets exif sodium pcntl pdo_pgsql;

# Install Composer globally.
COPY --from=composer:latest /usr/bin/composer /usr/bin/composer

# Set working directory to /app, aligning with volume mounts in docker-compose-dev.yml
# and docker-compose-static.yml.
WORKDIR /app

# Copy application source code. This acts as a fallback if no volume is mounted,
# but it will be overridden by bind mounts during development/static generation.
COPY . .

# Copy environment-specific php.ini files. The entrypoint selects the correct one.
COPY .docker/php/conf.d/php-dev.ini /usr/local/etc/php/conf.d/
COPY .docker/php/conf.d/php-prod.ini /usr/local/etc/php/conf.d/

# Install Composer production dependencies during build. Development dependencies
# are handled by the entrypoint script when IS_DEV is true.
RUN composer install --no-interaction --no-progress --no-suggest --no-dev --optimize-autoloader

# Copy the custom entrypoint script and make it executable.
COPY .docker/php/docker-entrypoint.sh /usr/local/bin/docker-entrypoint.sh
RUN chmod +x /usr/local/bin/docker-entrypoint.sh

# Ensure the application directory has correct ownership for the web server user.
# For mounted volumes, actual permissions are determined by the host. This primarily
# affects files copied into the image that might not be overridden by a mount.
RUN chown -R www-data:www-data /app

# Expose port for PHP-FPM.
EXPOSE 9000

# Use the custom entrypoint.
ENTRYPOINT ["docker-entrypoint.sh"]

# Default command to run.
CMD ["php-fpm"]