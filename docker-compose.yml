services:
  nginx:
    build:
      context: .
      dockerfile: .docker/nginx/Dockerfile
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - app_code:/var/www/html:ro
      - nginx_logs:/var/log/nginx
    depends_on:
      php:
        condition: service_healthy
      db: # if Nginx needs DB, add dependency on db for Nginx (e.g. for dynamic config)
        condition: service_healthy
    networks:
      - app-network
    restart: unless-stopped
    healthcheck:
      test: [ "CMD-SHELL", "nginx -t || exit 1" ]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 5s

  php:
    build:
      context: .
      dockerfile: .docker/php/Dockerfile
    volumes:
      - app_code:/var/www/html
      - php_logs:/var/log/php
    env_file:
      - ./.env
    environment:
      IS_DEV: "false"
      # Database connection variables for production
      DB_CONNECTION: pgsql
      DB_HOST: db # Service name in Docker Compose
      DB_PORT: 5432
      DB_DATABASE: myapp_db
      DB_USERNAME: myuser
      DB_PASSWORD: mypassword
    depends_on:
      db:
        condition: service_healthy # Ensure DB is ready before PHP starts
    networks:
      - app-network
    restart: unless-stopped
    healthcheck:
      test: [ "CMD", "php-fpm", "-t" ]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 5s

  # Database service for production
  db:
    image: postgres:16-alpine
    restart: always
    environment:
      POSTGRES_DB: myapp_db
      POSTGRES_USER: myuser
      POSTGRES_PASSWORD: mypassword
    volumes:
      - db_data:/var/lib/postgresql/data
    healthcheck:
      test: [ "CMD-SHELL", "pg_isready -U $$POSTGRES_USER -d $$POSTGRES_DB" ]
      interval: 10s
      timeout: 5s
      retries: 5

networks:
  app-network:
    driver: bridge

volumes:
  app_code:
  nginx_logs:
  php_logs:
  db_data: